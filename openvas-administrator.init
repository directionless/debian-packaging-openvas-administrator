#!/bin/sh -e
#
# Originally written by Miquel van Smoorenburg <miquels@drinkel.ow.org>.
# Modified for Debian GNU/Linux by Ian Murdock <imurdock@gnu.ai.mit.edu>.
# Modified for nessusd by Luca Andreucci <andrew@andrew.org>
# Further changes by Javier Fernandez-Sanguino <jfs@debian.org> for the 
# Debian GNU/Linux distribution
# Even more changes for Debian GNU/Linux openvas-scanner package by
# Tim Brown <timb@nth-dimension.org.uk>
# Modified and simplified for use with additional openvas pieces by
#  seph <seph@directionless.org> 2010-04
#
### BEGIN INIT INFO
# Provides:          openvas-administrator
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      
# Should-Stop:       
# Default-Start:     2 3 4 5
# Default-Stop:      0 6
# Short-Description: Start and stop the OpenVAS administrator daemon
# Description:       Controls the OpenVAS administrator daemon "openvasad".
### END INIT INFO

# default options
DAEMONOPTS=""
ENABLE=false

# time to wait for daemons death, in seconds
# don't set it too low or you might not let openvassd die gracefully
DODTIME=5
[ -r /etc/default/openvas-administrator ] && . /etc/default/openvas-administrator

NAME=openvasad
DAEMON=/usr/sbin/${NAME}
PIDFILE=/var/run/${NAME}.pid
LABEL="OpenVAS administrator daemon"

test -x $DAEMON || exit 0

case "x$ENABLE" in
  xtrue|xfalse)
     ;;
  *)
     log_warning_msg "Value of ENABLE must be true of false. Aborting"
     exit 1
     ;;
esac

running()
{
    # No pidfile, probably no daemon present
    #
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`

    # No pid, probably no daemon present
    [ -z "$pid" ] && return 1

    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # No openvassd?
    [ "$cmd" != "$DAEMON" ] &&  return 1

    return 0
}

start_function() {
        if "$ENABLE"; then
                start-stop-daemon --start --exec $DAEMON -- $DAEMONOPTS 2>&1 >/dev/null
        	errcode=$?
                # If we don't sleep then running() might not see the pidfile
        	sleep $DODTIME
        	return $errcode
        fi
}

force_stop() {
	[ ! -e "$PIDFILE" ] && return
	if running ; then
		kill -15 $pid
	# Is it really dead?
		sleep "$DODTIME"s
		if running ; then
			kill -9 $pid
			sleep "$DODTIME"s
			if running ; then
				echo "Cannot kill $LABEL (pid=$pid)!"
				exit 1
			fi
		fi
	fi
	rm -f $PIDFILE
}

case "$1" in
  start)
    echo -n "Starting $LABEL: "
    if start_function && running ;  then
	    echo ${NAME}.
    else
    	    echo "ERROR."
	    exit 1
    fi
    ;;
  stop)
    echo -n "Stopping $LABEL: "
    if running ; then
	start-stop-daemon --stop --pidfile $PIDFILE --quiet --oknodo --exec $DAEMON
    	sleep "$DODTIME"s
    fi
    if running; then
        force_stop
    fi
    echo ${NAME}.
    ;;
  restart)
    echo -n "Restarting $LABEL: "
    if running; then
    	start-stop-daemon --stop --pidfile $PIDFILE --quiet --oknodo --exec $DAEMON
    	sleep "$DODTIME"s
    fi
    if running; then
        force_stop
    fi
    if start && running ;  then
	    echo ${NAME}.
    else
    	    echo "ERROR."
	    exit 1
    fi
    ;;
  reload|force-reload)
    echo  -n "Reloading $LABEL configuration files: "
    start-stop-daemon --stop --pidfile $PIDFILE --signal 1 --exec $DAEMON
    sleep "$DODTIME"s
    if running ;  then
	    echo "done."
    else
    	    echo "ERROR."
	    exit 1
    fi
    ;;
  status)
    echo -n "$LABEL is "
    if running ;  then
	    echo "running"
    else
    	    echo " not running."
	    exit 1
    fi
    ;;
  *)
    echo "Usage: /etc/init.d/$0 {start|stop|restart|reload|status}"
    exit 1
    ;;
esac

exit 0
